# Ece Satılmış 2375681
.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    irmovq array, %rsi 
    irmovq $8, %rdx 
    call collect_into
    halt
collect_into:
    pushq	%r13
    pushq	%r12
    pushq	%rbp
    pushq	%rbx
    rrmovq	%rdx, %rbx
    andq	%rdi, %rdi 
    je          return2 # check if root != NULL
    xorq        %rax, %rbx  # check if array_len <= 0
    jle         return2
    jmp	loop
return2:
    xorq %rax, %rax # rax = 0
return:
    popq	%rbx
    popq	%rbp
    popq	%r12
    popq	%r13
    ret
loop:
    rrmovq	%rdi, %r12 # copy
    rrmovq	%rsi, %r13 # copy
    mrmovq	8(%rdi), %rdi # root = root->left
    rrmovq	%rbx, %rdx
    call	collect_into
    xorq       %rax, %rbx # check if (left_len == array_len)
    je	        return
    mrmovq	(%r12), %rdx 
    rrmovq %rax, %r8
    addq %r8, %r8
    addq %r8, %r8
    addq %r8, %r8
    addq %r13, %r8
    rmmovq	%rdx,(%r8)  # array[left_len] = root->value
    subq 	%rax, %rbx # array_len - left_len 
    rrmovq %rax, %rbp # rbp = left_len
    irmovq $1, %r11
    addq %r11, %rbp # left_len + 1
    mrmovq 16(%r12), %rdi # root = root->right 
    rrmovq %rbx, %rdx
    irmovq $-1, %r11 
    addq %r11, %rdx # array_len - left_len - 1
    rrmovq %rbp, %rsi
    addq %rsi, %rsi
    addq %rsi, %rsi
    addq %rsi, %rsi
    addq %r13, %rsi # rsi = array + left_len + 1
    call collect_into
    addq %rbp, %rax # rax = left_len + 1 + right_len
    jmp	return

# A sample eleven-element BST. Absolutely positioned 
# to avoid confusion when debugging.
.pos 0x200
root: 
.quad 17 
.quad node6 
.quad node24 
node6: 
.quad 6 
.quad node4 
.quad node11
node4: 
.quad 4 
.quad node3 
.quad node5 
node3: 
.quad 3 
.quad 0 
.quad 0 
node5: 
.quad 5
.quad 0 
.quad 0 
# Remember that 0 is null. 
node11:
.quad 11 
.quad node8 
.quad 0
node8: 
.quad 8
.quad 0 
.quad 0 
node24:
.quad 24 
.quad node19 
.quad node40
node19: 
.quad 19 
.quad 0
.quad 0 
node40: 
.quad 40 
.quad 0 
.quad node52 
node52: 
.quad 52 
# A sample eleven-element BST. Absolutely positioned 
# to avoid confusion when debugging.
.pos 0x200
root: 
.quad 17 
.quad node6 
.quad node24 
node6: 
.quad 6 
.quad node4 
.quad node11
node4: 
.quad 4 
.quad node3 
.quad node5 
node3: 
.quad 3 
.quad 0 
.quad 0 
node5: 
.quad 5
.quad 0 
.quad 0 
# Remember that 0 is null. 
node11:
.quad 11 
.quad node8 
.quad 0
node8: 
.quad 8
.quad 0 
.quad 0
# An array with size of 8 to put elements in:
# Make sure your code works correctly. Do not
# fill beyond the bounds of the array. You should
# see values in sorted order starting from the minimum 
# of the BST, since the traversal is in-order.
.pos 0x400
array: 
.quad 0 
.quad 0 
.quad 0 
.quad 0
.quad 0 
.quad 0
.quad 0
.quad 0
.pos 0x800 
Stack:
